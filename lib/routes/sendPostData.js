// Generated by CoffeeScript 1.10.0
(function() {
  var crypto;

  crypto = require('crypto');

  global.AnonyPages.app.post('/page/:pageID/post', function(req, res) {
    var accessToken, config, facebookObj, i18n, nextHashtag, pageConfig, pageFeed, pageID, userInfo;
    i18n = global.AnonyPages.i18n;
    if ((req.body["g-recaptcha-response"] == null) || (req.body.message == null) || !req.body.o || typeof global.AnonyPages.config.pages[req.params.pageID] === "undefined") {
      console.log("Post result: code 1");
      res.status(400).json({
        code: 1,
        err: 1,
        message: i18n.bad_request
      });
      false;
    }
    config = global.AnonyPages.config;
    pageID = req.params.pageID;
    pageConfig = config.pages[pageID];
    accessToken = pageConfig.access_token;
    facebookObj = new global.AnonyPages.facebook();
    userInfo = null;
    pageFeed = null;
    nextHashtag = "";
    if (req.body.o === "unauthorized") {
      console.log("Post result: code 10");
      res.status(400).json({
        code: 10,
        err: 1,
        message: i18n.login_to_facebook
      });
      false;
    }
    return global.AnonyPages.recaptcha.verify(req.body["g-recaptcha-response"]).then(function() {
      return facebookObj.verifyUserAccessToken(req.body.o);
    }).then(function(information) {
      userInfo = information;
      return facebookObj.getPageFeed(pageID, accessToken);
    }).then(function(pageFeed) {
      var afterPost, breakException, cipher, crypted, dd, doneFinding, e, error, h, m, message, mm, s, time, today, yyyy;
      breakException = {};
      try {
        doneFinding = false;
        pageFeed.data.forEach(function(post) {
          var latestCount, message;
          message = post.message.toString();
          if (message == null) {
            return;
          }
          if (message.toString().indexOf(pageConfig.hashtag) === 0) {
            latestCount = parseInt(message.toString().split("\n")[0].trim().slice(pageConfig.hashtag.length));
            nextHashtag = pageConfig.hashtag + (latestCount + 1).toString();
            doneFinding = true;
            throw breakException;
          }
        });
        if (!doneFinding) {
          nextHashtag = pageConfig.hashtag + "1";
        }
      } catch (error) {
        e = error;
        if (e !== breakException) {
          console.log("Post result: code 2");
          res.status(500).json({
            code: 2,
            err: 1,
            message: i18n.internal_serer_error
          });
          false;
        }
      }
      today = new Date();
      yyyy = today.getFullYear();
      mm = today.getMonth() < 10 ? '0' + (today.getMonth() + 1).toString() : (today.getMonth() + 1).toString();
      dd = today.getDate() < 10 ? '0' + today.getDate().toString() : today.getDate().toString();
      h = today.getHours() < 10 ? '0' + today.getHours().toString() : today.getHours().toString();
      m = today.getMinutes() < 10 ? '0' + today.getMinutes().toString() : today.getMinutes().toString();
      s = today.getSeconds() < 10 ? '0' + today.getSeconds().toString() : today.getSeconds().toString();
      time = yyyy + "-" + mm + "-" + dd + " " + h + ":" + m + ":" + s;
      afterPost = pageConfig.afterPost;
      cipher = crypto.createCipher('aes-256-cbc', config.encryptKey.toString('binary'));
      crypted = cipher.update(userInfo.id, 'utf8', 'hex');
      crypted += cipher.final('hex');
      message = nextHashtag + "\n";
      message += req.body.message.trim() + "\n\n";
      message += i18n.time_submitted + time + "\n";
      message += afterPost + "\n";
      message += i18n.post_identifier + crypted;
      return facebookObj.postArticleToPage(pageID, accessToken, message);
    }).then(function(postData) {
      var postID;
      postID = postData["id"].toString().split("_")[1];
      console.log("Post result: code 0 (" + nextHashtag + ")");
      return res.status(200).json({
        code: 0,
        err: 0,
        message: i18n.posting_succeed,
        result: {
          postURL: config.facebook.postURL.replace("{page_id}", pageID).replace("{postID}", postID),
          hashtagURL: config.facebook.hashtagURL.replace("{hashtag}", nextHashtag.replace("#", "")).replace("{postID}", postID),
          hashtag: nextHashtag,
          postid: postID
        }
      });
    }).fail(function(err) {
      switch (err) {
        case "recaptcha!":
          console.log("Post result: code 3");
          res.status(500).json({
            code: 3,
            err: 1,
            message: i18n.internal_serer_error
          });
          return false;
        case "recaptcha":
          console.log("Post result: code 4");
          console.log("reCAPTCHA response: " + req.body["g-recaptcha-response"]);
          res.status(400).json({
            code: 4,
            err: 1,
            message: i18n.please_complete_the_captcha_correctly
          });
          return false;
        case "verify!":
          console.log("Post result: code 5");
          res.status(500).json({
            code: 5,
            err: 1,
            message: i18n.internal_serer_error
          });
          return false;
        case "verify":
          console.log("Post result: code 6");
          res.status(400).json({
            code: 6,
            err: 1,
            message: i18n.bad_request
          });
          return false;
        case "getFeed":
          console.log("Post result: code 7");
          res.status(500).json({
            code: 7,
            err: 1,
            message: i18n.internal_serer_error
          });
          return false;
        case "post":
          console.log("Post result: code 8");
          res.status(500).json({
            code: 8,
            err: 1,
            message: i18n.internal_serer_error
          });
          return false;
        default:
          return console.log("Uncaught error: " + err);
      }
    });
  });

}).call(this);
