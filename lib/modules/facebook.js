// Generated by CoffeeScript 1.10.0
(function() {
  var FacebookAPI, Q, i18n, request;

  request = require("request");

  Q = require("q");

  i18n = global.AnonyPages.i18n;

  FacebookAPI = function() {
    var config;
    config = global.AnonyPages.config.facebook;
    this.app_id = config.app_id;
    this.app_secret = config.app_secret;
    this.getFeedURL = config.getFeedURL;
    this.postArticleURL = config.postArticleURL;
    return this.verifyUserAccessTokenURL = config.verifyUserAccessTokenURL;
  };

  FacebookAPI.prototype.verifyUserAccessToken = function(accessToken) {
    var deferred, self, url;
    deferred = Q.defer();
    self = this;
    url = self.verifyUserAccessTokenURL.replace("{accessToken}", accessToken);
    request({
      url: url,
      encoding: null,
      gzip: true,
      followRedirect: true
    }, function(error, response, body) {
      var data, e, error1;
      if (error) {
        deferred.reject("verify!");
        0;
      }
      try {
        data = JSON.parse(body);
      } catch (error1) {
        e = error1;
        deferred.reject("verify!");
        0;
      }
      if (data.error) {
        deferred.reject("verify");
        0;
      }
      return deferred.resolve(data);
    });
    return deferred.promise;
  };

  FacebookAPI.prototype.getPageFeed = function(pageID, accessToken) {
    var deferred, self, url;
    deferred = Q.defer();
    self = this;
    url = self.getFeedURL.replace("{pageID}", pageID).replace("{accessToken}", accessToken);
    request({
      url: url,
      encoding: null,
      gzip: true,
      followRedirect: true
    }, function(error, response, body) {
      var data, e, error1;
      if (error) {
        deferred.reject("getFeed");
        0;
      }
      try {
        data = JSON.parse(body);
      } catch (error1) {
        e = error1;
        deferred.reject("getFeed");
        0;
      }
      if (data.error || (data.data == null)) {
        deferred.reject("getFeed");
        0;
      }
      return deferred.resolve(data);
    });
    return deferred.promise;
  };

  FacebookAPI.prototype.postArticleToPage = function(pageID, accessToken, message) {
    var deferred, self, url;
    deferred = Q.defer();
    self = this;
    url = self.postArticleURL.replace("{pageID}", pageID);
    request.post({
      url: url,
      encoding: null,
      gzip: true,
      form: {
        access_token: accessToken,
        message: message
      },
      followRedirect: true
    }, function(error, response, body) {
      var data, e, error1;
      if (error) {
        deferred.reject("post");
        0;
      }
      try {
        data = JSON.parse(body);
      } catch (error1) {
        e = error1;
        deferred.reject("post");
        0;
      }
      if (data === false || (data.id == null)) {
        deferred.reject("post");
        0;
      }
      return deferred.resolve(data);
    });
    return deferred.promise;
  };

  module.exports = FacebookAPI;

}).call(this);
